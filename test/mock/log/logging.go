// Code generated by MockGen. DO NOT EDIT.
// Source: logging.go

// Package mock_log is a generated GoMock package.
package mock_log

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSimpleLogger is a mock of SimpleLogger interface.
type MockSimpleLogger struct {
	ctrl     *gomock.Controller
	recorder *MockSimpleLoggerMockRecorder
}

// MockSimpleLoggerMockRecorder is the mock recorder for MockSimpleLogger.
type MockSimpleLoggerMockRecorder struct {
	mock *MockSimpleLogger
}

// NewMockSimpleLogger creates a new mock instance.
func NewMockSimpleLogger(ctrl *gomock.Controller) *MockSimpleLogger {
	mock := &MockSimpleLogger{ctrl: ctrl}
	mock.recorder = &MockSimpleLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSimpleLogger) EXPECT() *MockSimpleLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockSimpleLogger) Debug(ctx context.Context, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockSimpleLoggerMockRecorder) Debug(ctx interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockSimpleLogger)(nil).Debug), varargs...)
}

// Debugf mocks base method.
func (m *MockSimpleLogger) Debugf(ctx context.Context, template string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, template}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockSimpleLoggerMockRecorder) Debugf(ctx, template interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, template}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockSimpleLogger)(nil).Debugf), varargs...)
}

// Error mocks base method.
func (m *MockSimpleLogger) Error(ctx context.Context, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockSimpleLoggerMockRecorder) Error(ctx interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockSimpleLogger)(nil).Error), varargs...)
}

// Errorf mocks base method.
func (m *MockSimpleLogger) Errorf(ctx context.Context, template string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, template}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockSimpleLoggerMockRecorder) Errorf(ctx, template interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, template}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockSimpleLogger)(nil).Errorf), varargs...)
}

// Info mocks base method.
func (m *MockSimpleLogger) Info(ctx context.Context, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockSimpleLoggerMockRecorder) Info(ctx interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockSimpleLogger)(nil).Info), varargs...)
}

// Infof mocks base method.
func (m *MockSimpleLogger) Infof(ctx context.Context, template string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, template}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *MockSimpleLoggerMockRecorder) Infof(ctx, template interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, template}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockSimpleLogger)(nil).Infof), varargs...)
}

// Warn mocks base method.
func (m *MockSimpleLogger) Warn(ctx context.Context, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockSimpleLoggerMockRecorder) Warn(ctx interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockSimpleLogger)(nil).Warn), varargs...)
}

// Warnf mocks base method.
func (m *MockSimpleLogger) Warnf(ctx context.Context, template string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, template}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnf", varargs...)
}

// Warnf indicates an expected call of Warnf.
func (mr *MockSimpleLoggerMockRecorder) Warnf(ctx, template interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, template}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnf", reflect.TypeOf((*MockSimpleLogger)(nil).Warnf), varargs...)
}
